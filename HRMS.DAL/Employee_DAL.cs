using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using HRMS.Entity;
using System.Data;
using System.Data.SqlClient;

namespace HRMS.DAL
{
    /// <summary>
    /// Employee ID :161585
    /// Employee Name : Viraj Dere
    /// Description : Handles Employee Specific operations
    /// Date of Creation : 10/23/2018
    /// </summary>
    public class Employee_DAL
    {
        //Function to get autogenerated Employee Id
        public static int GetAutoGeneratedEmployeeId()
        {
            int newEmpId;
            try
            {
                SqlConnection connObj = new SqlConnection(@"Data Source=ndamssql\sqlilearn;Initial Catalog=Sep19CHN;User ID=sqluser;Password=sqluser");
                SqlCommand cmdObj = new SqlCommand("select IDENT_CURRENT('Group4.Employee')+ident_incr('Group4.Employee')", connObj);
                connObj.Open();
                object objResult = cmdObj.ExecuteScalar();
                newEmpId = Convert.ToInt32(objResult);
                connObj.Close();// return single data - obj
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return newEmpId;

        }

        //Method to Add Employee to Database
        public static int AddEmployee(Employee newEmp,CapgeminiDetails capg)
        {
            int rowsAffected = 0;
            try
            {
                //Creating command object
                SqlCommand empCommand = DataConnections.GenerateCommand();

                //Assigning command text
                empCommand.CommandText = "Group4.usp_AddEmployee";

                //Adding parameters to command
                empCommand.Parameters.AddWithValue("@Employee_Id", capg.EmployeeId);
                empCommand.Parameters.AddWithValue("@First_Name", newEmp.FirstName);
                empCommand.Parameters.AddWithValue("@Middle_Name", newEmp.MiddleName);
                empCommand.Parameters.AddWithValue("@Last_Name", newEmp.LastName);
                empCommand.Parameters.AddWithValue("@Birth_Date", newEmp.BirthDate);
                empCommand.Parameters.AddWithValue("@Age", newEmp.Age);
                empCommand.Parameters.AddWithValue("@Gender", newEmp.Gender);
                empCommand.Parameters.AddWithValue("@Civil_Status", newEmp.CivilStatusId);
                empCommand.Parameters.AddWithValue("@Religion", newEmp.Religion);
                empCommand.Parameters.AddWithValue("@Citizenship", newEmp.Citizenship);
                empCommand.Parameters.AddWithValue("@Mobile_No", newEmp.MobileNo);
                empCommand.Parameters.AddWithValue("@Home_Phone_No", newEmp.HomePhoneNo);
                empCommand.Parameters.AddWithValue("@Address_", newEmp.Address);
                empCommand.Parameters.AddWithValue("@City", newEmp.City);
                empCommand.Parameters.AddWithValue("@State_", newEmp.State);
                empCommand.Parameters.AddWithValue("@Pincode", newEmp.Pincode);
                empCommand.Parameters.AddWithValue("@Country", newEmp.Country);
                empCommand.Parameters.AddWithValue("@Project_Id", newEmp.Project_Id);
                empCommand.Parameters.AddWithValue("@Skill_Id", newEmp.SkillId);
                empCommand.Parameters.AddWithValue("@Educational_Background", newEmp.EducationalBackground);
                empCommand.Parameters.AddWithValue("@Email", capg.Email);
                empCommand.Parameters.AddWithValue("@Level_Id", capg.LevelId);
                empCommand.Parameters.AddWithValue("@Date_Hired", capg.DateHired);
                empCommand.Parameters.AddWithValue("@Speciality", capg.SpecialityId);

                //Executing command
                empCommand.Connection.Open();
                rowsAffected = empCommand.ExecuteNonQuery();
                empCommand.Connection.Close();
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return rowsAffected;
        }

        //Method to Delete Employee From Database
        public static int DeleteEmployee(int empId)
        {
            int rowsAffected = 0;
            try
            {
                //Creating command object
                SqlCommand empCommand = DataConnections.GenerateCommand();
                //Assigning command text

                empCommand.CommandText = "Group4.usp_DeleteEmployee";
                empCommand.Parameters.AddWithValue("@Employee_Id", empId);

                empCommand.Connection.Open();
                rowsAffected = empCommand.ExecuteNonQuery();
                empCommand.Connection.Close();
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return rowsAffected;

        }

        //Method to update Employee From Database
        public static int UpdateEmployee(Employee newEmp,CapgeminiDetails capg)
        {
            int rowsAffected = 0;
            try
            {
                //Creating command object
                SqlCommand empCommand = DataConnections.GenerateCommand();
                //Assigning command text

                empCommand.CommandText = "Group4.usp_UpdateEmployee";
                empCommand.Parameters.AddWithValue("@Employee_Id", newEmp.EmployeeId);
                empCommand.Parameters.AddWithValue("@First_Name", newEmp.FirstName);
                empCommand.Parameters.AddWithValue("@Middle_Name", newEmp.MiddleName);
                empCommand.Parameters.AddWithValue("@Last_Name", newEmp.LastName);
                empCommand.Parameters.AddWithValue("@Birth_Date", newEmp.BirthDate);
                empCommand.Parameters.AddWithValue("@Age", newEmp.Age);
                empCommand.Parameters.AddWithValue("@Gender", newEmp.Gender);
                empCommand.Parameters.AddWithValue("@Civil_Status", newEmp.CivilStatusId);
                empCommand.Parameters.AddWithValue("@Religion", newEmp.Religion);
                empCommand.Parameters.AddWithValue("@Citizenship", newEmp.Citizenship);
                empCommand.Parameters.AddWithValue("@Mobile_No", newEmp.MobileNo);
                empCommand.Parameters.AddWithValue("@Home_Phone_No", newEmp.HomePhoneNo);
                empCommand.Parameters.AddWithValue("@Address_", newEmp.Address);
                empCommand.Parameters.AddWithValue("@City", newEmp.City);
                empCommand.Parameters.AddWithValue("@State_", newEmp.State);
                empCommand.Parameters.AddWithValue("@Pincode", newEmp.Pincode);
                empCommand.Parameters.AddWithValue("@Country", newEmp.Country);
                empCommand.Parameters.AddWithValue("@Project_Id", newEmp.Project_Id);
                empCommand.Parameters.AddWithValue("@Skill_Id", newEmp.SkillId);
                empCommand.Parameters.AddWithValue("@Educational_Background", newEmp.EducationalBackground);
                empCommand.Parameters.AddWithValue("@Email", capg.Email);
                empCommand.Parameters.AddWithValue("@Level_Id", capg.LevelId);
                empCommand.Parameters.AddWithValue("@Date_Hired", capg.DateHired);
                empCommand.Parameters.AddWithValue("@Speciality", capg.SpecialityId);

                empCommand.Connection.Open();
                rowsAffected = empCommand.ExecuteNonQuery();
                empCommand.Connection.Close();
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return rowsAffected;
        }

        //Method to Display Employee From Database
        public static DataTable DisplayAllEmployees()
        {
            DataTable dtEmp;
            SqlDataReader empReader = null;
            try
            {
                //Creating command object
                SqlCommand empCommand = DataConnections.GenerateCommand();

                dtEmp = new DataTable();
                empCommand.CommandText = "Group4.usp_DisplayEmployeeDetails";
                empCommand.Connection.Open();
                empReader = empCommand.ExecuteReader();
                if (empReader.HasRows)
                {
                    dtEmp.Load(empReader);
                }
                empReader.Close();
                empCommand.Connection.Close();
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return dtEmp;
        }

        //Method to Search Employee From Database
        public static DataTable SearchEmployeeById(int empId)
        {
            DataTable dtEmp;
            SqlDataReader empReader = null;
            try
            {
                //Creating command object
                SqlCommand empCommand = DataConnections.GenerateCommand();

                dtEmp = new DataTable(/*int EmpId*/);
                empCommand.CommandText = "Group4.usp_SearchEmployeeDetails";
                empCommand.Parameters.AddWithValue("@Employee_Id", empId);
                empCommand.Connection.Open();
                empReader = empCommand.ExecuteReader();
                if (empReader.HasRows)
                {
                    dtEmp.Load(empReader);
                }
                empReader.Close();
                empCommand.Connection.Close();
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return dtEmp;
        }

        //Method to load CivilStatus during employee operations
        public static DataTable LoadCivilStatus()
        {
            DataTable dtCivilS;
            SqlDataReader empReader = null;
            try
            {
                //Creating command object
                SqlCommand empCommand = DataConnections.GenerateCommand();

                dtCivilS = new DataTable();
                empCommand.CommandText = "Group4.usp_LoadCivilStatus";
                empCommand.Connection.Open();
                empReader = empCommand.ExecuteReader();
                dtCivilS.Load(empReader);
                empReader.Close();
                empCommand.Connection.Close();
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return dtCivilS;
        }

        //Method to load Project Names during employee operations
        public static DataTable LoadProjectNames()
        {
            DataTable dtProj;
            SqlDataReader empReader = null;
            try
            {
                //Creating command object
                SqlCommand empCommand = DataConnections.GenerateCommand();

                dtProj = new DataTable();
                empCommand.CommandText = "Group4.usp_LoadProjectNames";
                empCommand.Connection.Open();
                empReader = empCommand.ExecuteReader();
                dtProj.Load(empReader);
                empReader.Close();
                empCommand.Connection.Close();
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return dtProj;
        }

        //Method to load Skills during employee operations
        public static DataTable LoadSkills()
        {
            DataTable dtSkill;
            SqlDataReader empReader = null;
            try
            {
                //Creating command object
                SqlCommand empCommand = DataConnections.GenerateCommand();

                dtSkill = new DataTable();
                empCommand.CommandText = "Group4.usp_LoadSkills";
                empCommand.Connection.Open();
                empReader = empCommand.ExecuteReader();
                dtSkill.Load(empReader);
                empReader.Close();
                empCommand.Connection.Close();
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return dtSkill;
        }

        //Method to load Levels during employee operations
        public static DataTable LoadLevels()
        {
            DataTable dtLevel;
            SqlDataReader empReader = null;
            try
            {
                //Creating command object
                SqlCommand empCommand = DataConnections.GenerateCommand();

                dtLevel = new DataTable();
                empCommand.CommandText = "Group4.usp_LoadLevels";
                empCommand.Connection.Open();
                empReader = empCommand.ExecuteReader();
                dtLevel.Load(empReader);
                empReader.Close();
                empCommand.Connection.Close();
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return dtLevel;
        }

        //Method to load Speciality during employee operations
        public static DataTable LoadSpeciality()
        {
            DataTable dtSpec;
            SqlDataReader empReader = null;
            try
            {
                //Creating command object
                SqlCommand empCommand = DataConnections.GenerateCommand();

                dtSpec = new DataTable();
                empCommand.CommandText = "Group4.usp_LoadSpeciality";
                empCommand.Connection.Open();
                empReader = empCommand.ExecuteReader();
                dtSpec.Load(empReader);
                empReader.Close();
                empCommand.Connection.Close();
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return dtSpec;
        }
    }
}
