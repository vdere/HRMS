using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using HRMS.Entity;
using System.Data;
using System.Data.SqlClient;

namespace HRMS.DAL
{
    /// <summary>
    /// Employee ID :161585
    /// Employee Name : Viraj Dere
    /// Description : Handles Employee Level Specific operations
    /// Date of Creation : 10/23/2018
    /// </summary>
    public class Level_DAL
    {
        //Function to get autogenerated Level Id
        public static int GetAutoGeneratedLevelId()
        {
            int newLevelId;
            try
            {
                SqlConnection connObj = new SqlConnection(@"Data Source=ndamssql\sqlilearn;Initial Catalog=Sep19CHN;User ID=sqluser;Password=sqluser");
                SqlCommand cmdObj = new SqlCommand("select IDENT_CURRENT('Group4.Level_')+ident_incr('Group4.Level_')", connObj);
                connObj.Open();
                object objResult = cmdObj.ExecuteScalar();
                newLevelId = Convert.ToInt32(objResult);
                connObj.Close();// return single data - obj
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return newLevelId;

        }

        //Method to Add Level to Database
        public static int AddLevel(Level newLevel)
        {
            int rowsAffected = 0;
            try
            {
                //Creating command object
                SqlCommand LevelCommand = DataConnections.GenerateCommand();

                //Assigning command text
                LevelCommand.CommandText = "Group4.usp_AddLevel";

                //Adding parameters to command
                LevelCommand.Parameters.AddWithValue("@Level_Description", newLevel.LevelDescription);


                //Executing command
                LevelCommand.Connection.Open();
                rowsAffected = LevelCommand.ExecuteNonQuery();
                LevelCommand.Connection.Close();
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return rowsAffected;
        }

        //Method to Delete Level From Database
        public static int DeleteLevel(int levelId)
        {
            int rowsAffected = 0;
            try
            {
                //Creating command object
                SqlCommand LevelCommand = DataConnections.GenerateCommand();
                //Assigning command text

                LevelCommand.CommandText = "Group4.usp_DeleteLevel";
                LevelCommand.Parameters.AddWithValue("@Level_Id", levelId);

                LevelCommand.Connection.Open();
                rowsAffected = LevelCommand.ExecuteNonQuery();
                LevelCommand.Connection.Close();
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return rowsAffected;

        }

        //Method to Modify Level From Database
        public static int UpdateLevel(Level newLevel)
        {
            int rowsAffected = 0;
            try
            {
                //Creating command object
                SqlCommand LevelCommand = DataConnections.GenerateCommand();
                //Assigning command text

                LevelCommand.CommandText = "Group4.usp_UpdateLevel";
                LevelCommand.Parameters.AddWithValue("@Level_Description", newLevel.LevelDescription);

                LevelCommand.Connection.Open();
                rowsAffected = LevelCommand.ExecuteNonQuery();
                LevelCommand.Connection.Close();
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return rowsAffected;
        }

        //Method to Display Level From Database
        public static DataTable DisplayAllLevels()
        {
            DataTable dtLevel;
            SqlDataReader LevelReader = null;
            try
            {
                //Creating command object
                SqlCommand LevelCommand = DataConnections.GenerateCommand();

                dtLevel = new DataTable();
                LevelCommand.CommandText = "Group4.usp_DisplayAllLevels";
                LevelCommand.Connection.Open();
                LevelReader = LevelCommand.ExecuteReader();
                if (LevelReader.HasRows)
                {
                    dtLevel.Load(LevelReader);
                }
                LevelReader.Close();
                LevelCommand.Connection.Close();
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return dtLevel;
        }

        //Method to Search Level From Database
        public static DataTable SearchLevelById(int levelId)
        {
            DataTable dtLevel;
            SqlDataReader LevelReader = null;
            try
            {
                //Creating command object
                SqlCommand LevelCommand = DataConnections.GenerateCommand();

                dtLevel = new DataTable(/*int LevelId*/);
                LevelCommand.CommandText = "Group4.usp_SearchLevel";
                LevelCommand.Parameters.AddWithValue("@Level_Id", levelId);
                LevelCommand.Connection.Open();
                LevelReader = LevelCommand.ExecuteReader();
                if (LevelReader.HasRows)
                {
                    dtLevel.Load(LevelReader);
                }
                LevelReader.Close();
                LevelCommand.Connection.Close();
            }
            catch (SqlException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return dtLevel;
        }
    }
}
